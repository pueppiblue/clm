#set your language below
language: php

#set language version. This is only required if you use the default Shippable image for your build
php:
  - '7.0'

#specify which services you need. This is only valid if you use the default Shippable image for your build
services:
  - "mysql"
env:

matrix:

build:
    #commands in this section run on your build machine and not inside your CI container.
    pre_ci:

    pre_ci_boot:
        image_name:
        image_tag:
        pull:
        options:
    #commands in this section run inside your CI container. In addition, any commands such as ls, in this section can be used to skip default processing for CI.
    ci:
      # install composer, node and npm
      - curl -sS https://getcomposer.org/installer | php
      - curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
      - source ~/.nvm/nvm.sh && nvm install 5.10.1
      # check versions
      - node --version
      - npm -v
      - php -v
      - mysql -v
      # set system timezone
      - echo 'Europe/Berlin' | sudo tee /etc/timezone
      - sudo dpkg-reconfigure --frontend noninteractive tzdata
      # set php.ini timezone
      - echo "date.timezone = Europe/Berlin" >> $HOME/.phpenv/versions/$(phpenv version-name)/etc/php.ini
      # replace app parameters
      - mv app/config/parameters.yml.shippable app/config/parameters.yml
      # set mysql privileges
      - mysql -e "GRANT ALL ON clm_test.* TO clm_test@localhost IDENTIFIED BY ''; FLUSH PRIVILEGES;"
      - mysql -e "GRANT ALL ON clm_shippable.* TO shippable@localhost IDENTIFIED BY ''; FLUSH PRIVILEGES;"
      # install composer dependencies
      - php composer.phar install
      # create mysql database for test purposes
      - php bin/console d:d:d --env=test -n --if-exists --force
      - php bin/console d:d:c --env=test -n
      - php bin/console d:m:m --env=test -n
      # load test environment fixtures into test database
      - php bin/console h:d:f:l -n --env=test
      # configure production database access
      - mysql -e "CREATE DATABASE clm_shippable;"
      # run composer script to execute database creation and migrations
      - php composer.phar run-script project-init
      # load fixtures
      - php bin/console h:d:f:l -n
      # create test and coverage folders
      - mkdir -p shippable/codecoverage
      - mkdir -p shippable/testresults
      # run tests
      - bin/phpunit --log-junit shippable/testresults/junit.xml --coverage-xml shippable/codecoverage
      # - cp -r ./var/logs shippable/logs


    post_ci:
    on_success:
    on_failure:
    cache: false

    #commands in this section run on your build machine and not inside your CI container.
    push:



integrations:
#if you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: email
          type: email
          recipients:
            - Nils.Freigang@gmx.de
            - RobertFreigang@gmx.de
          branches:
            only:
              - master
          on_start: never
          on_success: never
          on_failure: never
          on_changed: never
